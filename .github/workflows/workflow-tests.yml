---
# yamllint disable rule:truthy
name: "Run Unit & Integration Tests"
on:
  workflow_call:
    inputs:
      runs-on:
        description: "The OS to run the job on"
        required: false
        default: "ubuntu-22.04"
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  files-changed:
    name: Detect which file has changed
    runs-on: "ubuntu-22.04"
    timeout-minutes: 5
    outputs:
      documentation: ${{ steps.changes.outputs.documentation_all }}
      yaml: ${{ steps.changes.outputs.yaml_all }}
      poetry_files: ${{ steps.changes.outputs.poetry_files }}
      github_workflows: ${{ steps.changes.outputs.github_workflows }}
      sync: ${{ steps.changes.outputs.sync_all }}
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: Check for file changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          token: ${{ github.token }}
          filters: .github/file-filters.yml

  yaml-lint:
    if: needs.files-changed.outputs.yaml == 'true'
    needs: ["files-changed"]
    runs-on: "ubuntu-latest"
    timeout-minutes: 5
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
        with:
          submodules: true
      - name: "Setup environment"
        run: "pip install yamllint==1.35.1"
      - name: "Linting: yamllint"
        run: "yamllint -s ."

  python-lint:
    if: needs.files-changed.outputs.python == 'true'
    needs: ["files-changed"]
    runs-on: "ubuntu-latest"
    timeout-minutes: 5
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
        with:
          submodules: true
      - name: "Setup environment"
        run: "pip install ruff==0.7.2"
      - name: "Linting: ruff check"
        run: "ruff check . --exclude python_sdk"
      - name: "Linting: ruff format"
        run: "ruff format --check --diff --exclude python_sdk ."

  markdown-lint:
    if: needs.files-changed.outputs.documentation == 'true'
    needs: ["files-changed"]
    runs-on: "ubuntu-latest"
    timeout-minutes: 5
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
        with:
          submodules: true
      - name: "Linting: markdownlint"
        uses: DavidAnson/markdownlint-cli2-action@v17
        with:
          config: .markdownlint.yaml
          globs: |
            **/*.{md,mdx}
            !changelog/*.md

  action-lint:
    if: needs.files-changed.outputs.github_workflows == 'true'
    needs: ["files-changed"]
    runs-on: "ubuntu-latest"
    timeout-minutes: 5
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
        with:
          submodules: true
      - name: Check workflow files
        run: |
          bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
          ./actionlint -color
        shell: bash
        env:
          SHELLCHECK_OPTS: --exclude=SC2086 --exclude=SC2046 --exclude=SC2004

  poetry-check:
    if: |
      needs.files-changed.outputs.poetry_files == 'true' ||
      github.ref_name == 'stable' ||
      github.ref_name == 'develop'
    needs:
      - "files-changed"
    uses: "./.github/workflows/workflow-poetry-check.yml"
    with:
      directory: "./"

  # TODO: Create the unit tests...
  # unit-tests:
  #   name: Unit Tests (py${{  matrix.python-version }})
  #   strategy:
  #     matrix:
  #       python-version:
  #         - "3.9"
  #         - "3.10"
  #         - "3.11"
  #         - "3.12"
  #   if: needs.files-changed.outputs.sync == 'true'
  #   needs: ["files-changed", "python-lint", "poetry-check"]
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 30
  #   defaults:
  #     run:
  #       working-directory: sync/
  #   steps:
  #     - name: "Check out repository code"
  #       uses: "actions/checkout@v4"
  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     - name: "Setup environment"
  #       run: |
  #         pipx install poetry
  #         poetry config virtualenvs.prefer-active-python true
  #         pip install toml invoke
  #     - name: "Install Package"
  #       run: "poetry install"
  #     - name: "markdownlint-cli2, ruff, and pylint Tests"
  #       run: "poetry run invoke tests.tests-unit"
